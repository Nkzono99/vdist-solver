from argparse import ArgumentParser

import emout
import matplotlib.pyplot as plt
import numpy as np
from vdsolver.tools.emses import VSolveTarget
from vdsolver.tools.emses.utils import create_default_simulator


def parse_args():
    parser = ArgumentParser()

    parser.add_argument('--directory', '-d', default='./')
    parser.add_argument('--istep', '-is', default=-1, type=int)
    parser.add_argument('--ispec', '-i', default=0, type=int)
    parser.add_argument('--dt', '-dt', default=1.0, type=float)
    parser.add_argument('--maxstep', '-ms', default=10000, type=int)
    parser.add_argument('--max_workers', '-mw', default=8, type=int)
    parser.add_argument('--chunksize', '-chk', default=100, type=int)
    parser.add_argument('--use_si', action='store_true')

    return parser.parse_args()


def create_simulator(*args, **kwargs):
    sim = None
    return sim


def main():
    args = parse_args()

    data = emout.Emout(args.directory)

    N{C1} = 100

    pos = np.array([0, 0, 0])

    {lim}

    min_velocity = [vxlim[0], vylim[0], vzlim[0]]
    max_velocity = [vxlim[1], vylim[1], vzlim[1]]
    nvelocities = [vxlim[2], vylim[2], vzlim[2]]

    # Create simulator
    sim = create_default_simulator(data, args.ispec, args.istep,
                                   use_si=False,
                                   use_hole=True)
    # sim = create_simulator()

    target = VSolveTarget(data,
                          sim,
                          pos,
                          min_velocity,
                          max_velocity,
                          nvelocities,
                          args.maxstep,
                          args.max_workers,
                          args.chunksize,
                          args.ispec,
                          args.dt,
                          args.istep,
                          show_progress=True,
                          )

    vels, probs = target.solve()

    vels = vels.reshape(N{C1}, 3)
    V{C1} = vels[:, {i1}]
    if args.use_si:
        V{C1} = data.unit.v.reverse(V{C1})
    probs = probs.reshape(N{C1})

    plt.plot(V{C1}, probs)
    plt.colorbar()
    plt.xlabel('V{C1}')
    plt.ylabel('Probability')

    plt.show()


if __name__ == '__main__':
    main()
