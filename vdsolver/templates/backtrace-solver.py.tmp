from argparse import ArgumentParser

import emout
import matplotlib.pyplot as plt
import numpy as np
from vdsolver.core.plot import plot_periodic
from vdsolver.tools.emses.targets import BackTraceTraget
from vdsolver.tools.emses.utils import create_default_simulator


def parse_args():
    parser = ArgumentParser()

    parser.add_argument('--directory', '-d', default='./')
    parser.add_argument('--istep', '-is', default=-1, type=int)
    parser.add_argument('--ispec', '-i', default=0, type=int)
    parser.add_argument('--dt', '-dt', default=1.0, type=float)
    parser.add_argument('--maxstep', '-ms', default=10000, type=int)
    parser.add_argument('--use_si', action='store_true')

    return parser.parse_args()


def create_simulator(*args, **kwargs):
    sim = None
    return sim


def main():
    args = parse_args()

    data = emout.Emout(args.directory)

    pos = np.array([0, 0, 0])
    vel = np.array([0, 0, 0])

    # Create simulator
    sim = create_default_simulator(data, args.ispec, args.istep,
                                   use_si=False,
                                   use_hole=True)
    # sim = create_simulator()

    target = BackTraceTraget(data,
                             sim,
                             args.istep,
                             args.ispec,
                             pos,
                             vel,
                             args.maxstep,
                             args.dt,
                             )

    history, prob, pcl_last = target.solve()

    if args.use_si:
        for pcl in history:
            pcl.pos = data.unit.length.reverse(pcl.pos)
            pcl.vel = data.unit.v.reverse(pcl.vel)
            pcl.t = data.unit.t.reverse(pcl.t)

    plot_periodic(history, idxs=[{i1}, {i2}])
    plt.xlabel('{C1}')
    plt.ylabel('{C2}')

    plt.show()


if __name__ == '__main__':
    main()
